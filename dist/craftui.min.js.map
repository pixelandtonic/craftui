{"version":3,"file":"craftui.min.js","sources":["../src/plugins/icons.js","../src/components/Badge.vue","../src/components/Btn.vue","../src/components/Checkbox.vue","../src/components/Dropdown.vue","../src/components/Field.vue","../src/components/Icon.vue","../src/components/Lightswitch.vue","../src/components/Pane.vue","../src/components/Radio.vue","../src/components/Spinner.vue","../node_modules/vue-the-mask/src/maskit.js","../node_modules/vue-the-mask/src/masker.js","../node_modules/vue-the-mask/src/dynamic-mask.js","../node_modules/vue-the-mask/src/tokens.js","../node_modules/vue-the-mask/src/directive.js","../src/components/Textbox.vue","../src/components/index.js","../src/craftui.base.js"],"sourcesContent":["import iconsSvg from '../sprites/icons.svg'\n\nexport default {\n    install () {\n        if(typeof document !== 'undefined'){\n            const iconsWrapper = document.createElement('div')\n            iconsWrapper.style.display = 'none'\n            iconsWrapper.innerHTML = iconsSvg\n            document.body.insertBefore(iconsWrapper, document.body.firstChild)\n        }\n    },\n}","<template>\n    <span\n            class=\"tw-inline-flex tw-items-center tw-rounded tw-font-medium\"\n            :class=\"[{\n                ['tw-px-2 tw-py-0.5 tw-leading-4 tw-text-xs']: !large,\n                ['tw-px-2.5 tw-py-0.5 tw-leading-5 tw-text-sm']: large,\n                ['tw-bg-'+type+'-background']: true,\n                ['tw-text-'+type+'-text']: true\n            }]\"\n    >\n        <slot></slot>\n    </span>\n</template>\n\n<script>\n    export default {\n        props: {\n            /**\n             * 'default', 'success', 'info', 'warning', or 'danger'\n             */\n            type: {\n                type: String,\n                default: 'default',\n            },\n            /**\n             * Larger version of badge if set to `true`.\n             */\n            large: {\n                type: Boolean,\n                default: false,\n            },\n        },\n    }\n</script>","<template>\n    <component :is=\"component\" class=\"c-btn\" :to=\"to\" :href=\"href\" :target=\"target\" :type=\"computedType\" :class=\"[{\n                small,\n                large,\n                block,\n                outline,\n                loading,\n                [kind]: true,\n                'c-btn-icon': icon && !$slots.default\n            }]\"\n            :disabled=\"disabled\"\n            @click=\"$emit('click')\"\n    >\n        <template v-if=\"loading\">\n            <spinner></spinner>\n        </template>\n\n        <div class=\"c-btn-content\">\n            <icon v-if=\"icon && icon.length > 0\" :icon=\"icon\" size=\"sm\" />\n\n            <slot></slot>\n\n            <icon class=\"ml-1\" v-if=\"trailingIcon && trailingIcon.length > 0\" :icon=\"trailingIcon\" size=\"sm\" />\n        </div>\n    </component>\n</template>\n\n<script>\n    export default {\n        name: 'Btn',\n\n        props: {\n            /**\n             * 'button', 'submit', 'reset', or 'menu'\n             */\n            type: {\n                type: String,\n                default: 'button',\n            },\n            /**\n             * 'default', 'primary', or 'danger'\n             */\n            kind: {\n                type: String,\n                default: 'default',\n            },\n            /**\n             * Smaller version of button if set to `true`.\n             */\n            small: {\n                type: Boolean,\n                default: false,\n            },\n            /**\n             * Larger version of button if set to `true`.\n             */\n            large: {\n                type: Boolean,\n                default: false,\n            },\n            /**\n             * Block version of button if set to `true`.\n             */\n            block: {\n                type: Boolean,\n                default: false,\n            },\n            /**\n             * Disabled version of button if set to `true`.\n             */\n            disabled: {\n                type: Boolean,\n                default: false,\n            },\n            /**\n             * Outline version of button if set to `true`.\n             */\n            outline: {\n                type: Boolean,\n                default: false,\n            },\n            icon: {\n                type: String,\n                default: null,\n            },\n            trailingIcon: {\n                type: String,\n                default: null,\n            },\n            loading: {\n                type: Boolean,\n                default: false,\n            },\n            to: {\n                type: String,\n                default: null,\n            },\n            href: {\n                type: String,\n                default: null,\n            },\n            target: {\n                type: String,\n                default: null,\n            },\n        },\n\n        computed: {\n            component() {\n                if (this.to !== null) {\n                    return 'router-link'\n                }\n\n                if (this.href !== null) {\n                    return 'a'\n                }\n\n                return 'button'\n            },\n\n            computedType() {\n                if (this.to !== null ||Â this.href !== null) {\n                    return null\n                }\n\n                return this.type\n            }\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n    @import \"../sass/mixins\";\n\n    .c-btn,\n    a.c-btn,\n    button.c-btn {\n        @apply .inline-block .px-4 .py-2 .text-sm .leading-5 .rounded-md .bg-interactive-secondary .text-interactive-text .no-underline .border .border-solid .border-interactive-secondary;\n\n        &:focus {\n            @apply .outline-none .shadow-outline;\n        }\n\n        &:not(.outline, :focus) {\n        }\n\n        &:not([disabled]) {\n            &:hover {\n                @apply .cursor-pointer .bg-interactive-secondary-hover .border-interactive-secondary-hover .no-underline;\n            }\n\n            &:active {\n                @apply .cursor-pointer .bg-interactive-secondary-active .border-interactive-secondary-active;\n            }\n        }\n\n        &.block {\n            @apply .w-full .my-2;\n        }\n\n        &.small {\n            @apply .px-3 .leading-4;\n\n            .c-icon {\n                width: 12px;\n                height: 12px;\n            }\n        }\n\n        &.large {\n            @apply .text-base .leading-6;\n        }\n\n        &.primary,\n        &.danger {\n            &:not(.outline) {\n                .c-icon {\n                    fill: #fff;\n                }\n            }\n        }\n\n        &.primary:not(.outline) {\n            @apply .bg-interactive-primary .border-interactive-primary .text-interactive-text-inverse;\n\n            &:not([disabled]) {\n                &:hover {\n                    @apply .bg-interactive-primary-hover .border-interactive-primary-hover;\n                }\n\n                &:active {\n                    @apply .bg-interactive-primary-active .border-interactive-primary-active;\n                }\n            }\n        }\n\n        &.danger {\n            @apply .bg-interactive-danger .border-interactive-danger .text-interactive-text-inverse;\n\n            &:not([disabled]) {\n                &:hover {\n                    @apply .bg-interactive-danger-hover .border-interactive-danger-hover;\n                }\n\n                &:active {\n                    @apply .bg-interactive-danger-active .border-interactive-danger-active;\n                }\n            }\n        }\n\n        &[disabled] {\n            @apply .opacity-50 .cursor-default;\n        }\n\n        &.outline {\n            @apply .bg-transparent;\n\n            &.primary {\n                @apply .text-blue-500;\n\n                &:not([disabled]) {\n                    &:hover {\n                        @apply .text-white .bg-blue-500;\n                    }\n\n                    &:active {\n                        @apply .text-white .bg-blue-800;\n                    }\n                }\n            }\n\n            &.danger {\n                @apply .text-interactive-danger;\n\n                &:not([disabled]) {\n                    &:hover {\n                        @apply .text-white .bg-interactive-danger;\n                    }\n\n                    &:active {\n                        @apply .text-white .bg-interactive-danger-active;\n                    }\n                }\n            }\n\n            .c-icon {\n                @apply .fill-current;\n            }\n        }\n\n        &.loading {\n            @apply .relative;\n\n            &:not(.outline) {\n                &.primary,\n                &.danger {\n                    .c-spinner {\n                        & > .animation {\n                            @apply .border-white;\n                        }\n                    }\n                }\n            }\n\n            &.outline {\n                &.primary .c-spinner > .animation {\n                    @apply .border-blue-500;\n                }\n\n                &.danger .c-spinner > .animation {\n                    @apply .border-red-500;\n                }\n            }\n\n            .c-spinner {\n                @apply .absolute .inset-0 .flex .justify-center .items-center;\n            }\n\n            .c-btn-content {\n                @apply .invisible;\n            }\n        }\n\n        .c-icon {\n            @apply .align-middle;\n        }\n\n        &:not(.c-btn-icon) {\n            .c-icon {\n                @include mr(1);\n            }\n        }\n\n\n        .c-btn-content {\n            @apply .inline-block;\n        }\n    }\n</style>\n","<template>\n    <div class=\"c-checkbox tw-relative tw-flex tw-items-start tw-my-2\" :class=\"{\n        disabled,\n    }\">\n        <div class=\"tw-flex tw-items-center tw-h-5\">\n            <input type=\"checkbox\"\n                   class=\"tw-form-checkbox tw-h-4 tw-w-4\"\n                   :id=\"id\"\n                   :value=\"value\"\n                   :checked=\"checked\"\n                   :disabled=\"disabled\"\n                   @input=\"onInput\"\n            />\n        </div>\n\n        <div class=\"tw-ml-2 tw-text-sm tw-leading-5\" :class=\"{'tw-text-danger': invalid}\">\n            <label class=\"tw-mb-0\" :for=\"id\">\n                {{ label }}\n            </label>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        model: {\n            prop: 'checked',\n            event: 'input'\n        },\n\n        props: {\n            checked: Boolean,\n            disabled: Boolean,\n            id: {\n                type: String,\n                default: function() {\n                    return 'checkbox-' + this._uid\n                }\n            },\n            invalid: Boolean,\n            label: String,\n            value: String,\n        },\n\n        methods: {\n            onInput($event) {\n                this.$emit('input', $event.target.checked)\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\">\n    .c-checkbox {\n        &.disabled {\n            @apply opacity-50;\n        }\n    }\n</style>","<template>\n    <div class=\"c-dropdown\" :class=\"{\n        'is-invalid': invalid,\n        'tw-w-full': fullwidth,\n        disabled,\n    }\">\n            <select class=\"tw-form-select test sm:tw-text-sm sm:tw-leading-5\" :disabled=\"disabled\" :value=\"value\" :class=\"{\n                'tw-w-full': fullwidth,\n                'tw-border-danger-separator': invalid,\n                'tw-border-field-separator': !invalid,\n            }\" @input=\"$emit('input', $event.target[$event.target.selectedIndex].value)\">\n                <option v-for=\"(option, key) in options\" :value=\"option.value\" :key=\"key\">{{ option.label }}</option>\n            </select>\n    </div>\n</template>\n\n\n<script>\n    export default {\n        props: {\n            disabled: {\n                type: Boolean,\n                default: false,\n            },\n            invalid: {\n                type: Boolean,\n                default: false,\n            },\n            fullwidth: {\n                type: Boolean,\n                default: false,\n            },\n            id: {\n                type: String,\n                default: function () {\n                    return 'c-dropdown-id-' + this._uid;\n                },\n            },\n            options: {\n                type: Array,\n                default: null,\n            },\n            value: {\n                type: String | Number,\n                default: null,\n            },\n        },\n    }\n</script>\n\n<style lang=\"scss\">\n    .c-dropdown {\n        display: inline-block;\n        position: relative;\n\n        .tw-border-field-separator {\n            @apply .border-cool-gray-200;\n        }\n\n        &.disabled {\n            @apply opacity-50;\n        }\n\n        &:after {\n            z-index: 10000;\n            content: ' ';\n            position: absolute;\n            top: calc(50% - 4px);\n            right: 0.75rem;\n            width: 8px;\n            height: 8px;\n            background-position: center center;\n            background-repeat: no-repeat;\n            background-image:url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3E%3Cpath fill='currentColor' d='M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z'%3E%3C/path%3E%3C/svg%3E\");\n            user-select: none;\n            pointer-events: none;\n        }\n    }\n\n</style>","<template>\n    <div :id=\"'field-' + labelFor\" class=\"c-field mb-4\" :class=\"{\n        'sm:tw-border-t sm:tw-border-separator sm:tw-pt-5 mt-6 sm:tw-mt-5 sm:tw-grid sm:tw-grid-cols-3 sm:tw-gap-4 sm:tw-items-start': !vertical,\n        'mt-6 sm:tw-mt-5': !first\n    }\">\n        <div>\n            <label v-if=\"label\" :for=\"labelFor\" class=\"tw-text-sm tw-font-medium tw-text-text tw-mb-0\" :class=\"{\n                'tw-block tw-leading-5 sm:tw-mt-px sm:tw-pt-2': !vertical\n            }\">{{label}}</label>\n\n            <div v-if=\"instructions\" class=\"instructions tw-text-sm tw-text-light-text\">\n                <p>{{ instructions }}</p>\n            </div>\n        </div>\n\n        <div class=\"tw-mt-1 sm:tw-col-span-2\">\n            <div :class=\"{\n                'tw-max-w-xs': !vertical,\n            }\">\n                <slot></slot>\n\n                <template v-if=\"errors && errors.length > 0\">\n                    <ul class=\"invalid-feedback tw-text-danger tw-text-sm tw-mt-1 tw-ml-5 tw-list-disc\">\n                        <template v-if=\"errors\" v-for=\"(error, key) in errors\">\n                            <li :key=\"key\">{{ error }}</li>\n                        </template>\n                    </ul>\n                </template>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        props: {\n            errors: {\n                type: Array | Boolean,\n                default: null,\n            },\n            labelFor: {\n                type: String,\n                default: function () {\n                    return 'c-field-id-' + this._uid;\n                },\n            },\n            instructions: {\n                type: String,\n                default: null,\n            },\n            label: {\n                type: String,\n                default: null,\n            },\n            vertical: {\n                type: Boolean,\n                default: false,\n            },\n            first: {\n                type: Boolean,\n                default: false,\n            }\n        },\n    }\n</script>\n","<template>\n    <svg viewBox=\"0 0 18 18\" width=\"18\" height=\"18\" role=\"presentation\" class=\"c-icon tw-inline-block tw-align-middle tw-relative tw-fill-current\" :class=\"{\n        ['tw-w-3 tw-h-3']: size === 'sm',\n        ['tw-w-4 tw-h-4']: size === 'base',\n        ['tw-w-5 tw-h-5']: size === 'lg',\n        ['tw-w-6 tw-h-6']: size === 'xl',\n        ['tw-w-8 tw-h-8']: size === '2xl',\n        ['tw-w-10 tw-h-10']: size === '3xl',\n        ['tw-w-12 tw-h-12']: size === '4xl',\n        ['tw-w-16 tw-h-16']: size === '5xl',\n    }\">\n        <use xmlns:xlink=\"http://www.w3.org/1999/xlink\" :xlink:href=\"'#' + icon\"></use>\n    </svg>\n</template>\n\n<script>\n    export default {\n        props: {\n            /**\n             * The ID of the icon.\n             */\n            icon: {\n                type: String,\n                default: null,\n            },\n            /**\n             * 'sm', 'base', 'lg', 'xl', '2xl', '3xl', '4xl', or '5xl'\n             */\n            size: {\n                type: String,\n                default: 'base',\n            },\n        },\n    }\n</script>\n\n","<template>\n    <div class=\"c-lightswitch mt-1\">\n        <div class=\"c-lightswitch-input\">\n            <label :for=\"id\" class=\"lightswitch\" :class=\"{disabled: disabled}\">\n                <input :id=\"id\" type=\"checkbox\" :checked=\"checked\" :disabled=\"disabled\" @change=\"onChange\" />\n                <div class=\"slider round\"></div>\n            </label>\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        props: {\n            checked: {\n                type: Boolean,\n                default: null,\n            },\n            disabled: {\n                type: Boolean,\n                default: null,\n            },\n            id: {\n                type: String,\n                default: function () {\n                    return 'c-lightswitch-id-' + this._uid;\n                },\n            },\n        },\n\n        methods: {\n            onChange($event) {\n                this.$emit('update:checked', $event.target.checked)\n                this.$emit('change', $event.target.checked)\n            },\n        }\n    }\n</script>\n\n<style lang=\"scss\">\n    @import \"../sass/mixins\";\n\n    .c-lightswitch {\n        .c-lightswitch-input {\n            label {\n                @apply .relative .block .select-none;\n                width: 34px;\n                height: 22px;\n\n                input {\n                    @apply .absolute .opacity-0;\n                }\n\n                .slider {\n                    @apply .absolute .inset-0 .cursor-pointer .bg-gray-400;\n                    -webkit-transition: .4s;\n                    transition: .4s;\n                }\n\n                .slider:before {\n                    @apply .absolute .bg-white;\n                    content: \"\";\n                    height: 20px;\n                    width: 20px;\n                    @include left(1px);\n                    bottom: 1px;\n                    -webkit-transition: .1s;\n                    transition: .1s;\n                }\n\n                input:checked + .slider {\n                    background-color: #38c172;\n                }\n\n                input:focus + .slider,\n                input:active + .slider {\n                    box-shadow: 0 0 0 2px rgba(52,144,220,.5);\n                }\n\n                input:checked + .slider:before {\n                    -webkit-transform: translateX(12px);\n                    -ms-transform: translateX(12px);\n                    transform: translateX(12px);\n                }\n\n                .slider.round {\n                    border-radius: 34px;\n                }\n\n                .slider.round:before {\n                    border-radius: 50%;\n                }\n\n                &.disabled {\n                    opacity: .4;\n\n                    .slider {\n                        @apply .cursor-default;\n                    }\n                }\n            }\n        }\n    }\n</style>","<template>\n    <div class=\"tw-bg-primary-background tw-rounded-lg tw-shadow-md tw-mb-6 tw-overflow-hidden\" :class=\"{'tw-px-6 tw-py-5': (padded === undefined||padded === true)}\">\n        <slot></slot>\n    </div>\n</template>\n\n<script>\n    export default {\n        props: ['padded'],\n    }\n</script>","<template>\n    <div class=\"c-radio tw-flex tw-items-center tw-my-2\" :class=\"{\n        disabled,\n    }\">\n        <input type=\"radio\"\n               class=\"tw-form-radio tw-h-4 tw-w-4\"\n               :id=\"id\"\n               :value=\"value\"\n               :checked=\"checked\"\n               :disabled=\"disabled\"\n               @input=\"onInput\"\n        />\n\n        <label :for=\"id\" class=\"tw-mb-0 tw-pl-2 tw-ml-0\">\n            <span class=\"tw-block tw-text-sm tw-leading-5 tw-text-text\">{{ label }}</span>\n        </label>\n    </div>\n</template>\n\n<script>\n    export default {\n        model: {\n            prop: 'modelValue',\n            event: 'input'\n        },\n\n        props: {\n            disabled: Boolean,\n            id: {\n                type: String,\n                default: function() {\n                    return 'radio-' + this._uid\n                }\n            },\n            label: String,\n            modelValue: String,\n            value: String,\n        },\n\n        computed: {\n            checked() {\n                return this.modelValue === this.value\n            }\n        },\n\n        methods: {\n            onInput($event) {\n                this.$emit('input', $event.target.value)\n            }\n        },\n    }\n</script>\n\n<style lang=\"scss\">\n    .c-radio {\n        &.disabled {\n            @apply opacity-50;\n        }\n    }\n</style>","<template>\n    <div class=\"c-spinner tw-inline-block\" :class=\"{\n        [size]: true\n    }\">\n        <div class=\"animation\"></div>\n    </div>\n</template>\n\n<script>\n    export default {\n        props: {\n            /**\n             * 'base' or 'lg'\n             */\n            size: {\n                type: String,\n                default: 'base',\n            },\n        },\n    }\n</script>\n\n<style lang=\"scss\">\n    .c-spinner {\n        & > .animation {\n            animation: rotator .7s linear infinite;\n            width: 20px;\n            height: 20px;\n            border-radius: 50%;\n            border: 2px solid transparent;\n            border-top-color: transparent !important;\n            border-left-color: transparent !important;\n            border-right-color: var(--craftui-icon);\n            border-bottom-color: var(--craftui-icon);\n        }\n\n        &.sm {\n            & > .animation {\n                width: 16px;\n                height: 16px;\n            }\n        }\n\n        &.lg {\n            & > .animation {\n                width: 32px;\n                height: 32px;\n                border-width: 3px;\n            }\n        }\n    }\n\n    @keyframes rotator {\n        0% {\n            transform: rotate(0)\n        }\n\n        to {\n            transform: rotate(1turn)\n        }\n    }\n</style>\n","export default function maskit (value, mask, masked = true, tokens) {\n  value = value || ''\n  mask = mask || ''\n  var iMask = 0\n  var iValue = 0\n  var output = ''\n  while (iMask < mask.length && iValue < value.length) {\n    var cMask = mask[iMask]\n    var masker = tokens[cMask]\n    var cValue = value[iValue]\n    if (masker && !masker.escape) {\n      if (masker.pattern.test(cValue)) {\n      \toutput += masker.transform ? masker.transform(cValue) : cValue\n        iMask++\n      }\n      iValue++\n    } else {\n      if (masker && masker.escape) {\n        iMask++ // take the next mask char and treat it as char\n        cMask = mask[iMask]\n      }\n      if (masked) output += cMask\n      if (cValue === cMask) iValue++ // user typed the same char\n      iMask++\n    }\n  }\n\n  // fix mask that ends with a char: (#)\n  var restOutput = ''\n  while (iMask < mask.length && masked) {\n    var cMask = mask[iMask]\n    if (tokens[cMask]) {\n      restOutput = ''\n      break\n    }\n    restOutput += cMask\n    iMask++\n  }\n\n  return output + restOutput\n}\n","import maskit from './maskit'\nimport dynamicMask from './dynamic-mask'\n// Facade to maskit/dynamicMask when mask is String or Array\nexport default function (value, mask, masked = true, tokens) {\n  return Array.isArray(mask)\n         ? dynamicMask(maskit, mask, tokens)(value, mask, masked, tokens)\n         : maskit(value, mask, masked, tokens)\n}\n","export default function dynamicMask (maskit, masks, tokens) {\n  masks = masks.sort((a, b) => a.length - b.length)\n  return function (value, mask, masked = true) {\n    var i = 0\n    while (i < masks.length) {\n      var currentMask = masks[i]\n      i++\n      var nextMask = masks[i]\n      if (! (nextMask && maskit(value, nextMask, true, tokens).length > currentMask.length) ) {\n        return maskit(value, currentMask, masked, tokens)\n      }\n    }\n    return '' // empty masks\n  }\n}\n","module.exports = {\n  '#': {pattern: /\\d/},\n  'X': {pattern: /[0-9a-zA-Z]/},\n  'S': {pattern: /[a-zA-Z]/},\n  'A': {pattern: /[a-zA-Z]/, transform: v => v.toLocaleUpperCase()},\n  'a': {pattern: /[a-zA-Z]/, transform: v => v.toLocaleLowerCase()},\n  '!': {escape: true}\n}\n\n// https://github.com/fernandofleury/vanilla-masker/blob/master/lib/vanilla-masker.js\n// DIGIT = \"9\",\n// ALPHA = \"A\",\n// ALPHANUM = \"S\"\n\n// https://github.com/niksmr/vue-masked-input\n// 1 - number\n// a - letter\n// A - letter, forced to upper case when entered\n// * - alphanumeric\n// # - alphanumeric, forced to upper case when entered\n// + - any character\n\n// https://github.com/probil/v-mask\n// #\tNumber (0-9)\n// A\tLetter in any case (a-z,A-Z)\n// N\tNumber or letter\n// X\tAny symbol\n\n// https://github.com/igorescobar/jQuery-Mask-Plugin/blob/master/src/jquery.mask.js#L518\n// '0': {pattern: /\\d/},\n// '9': {pattern: /\\d/, optional: true},\n// '#': {pattern: /\\d/, recursive: true},\n// 'A': {pattern: /[a-zA-Z0-9]/},\n// 'S': {pattern: /[a-zA-Z]/}\n\n// https://github.com/the-darc/string-mask\n// 0\tAny numbers\n// 9\tAny numbers (Optional)\n// #\tAny numbers (recursive)\n// A\tAny alphanumeric character\n// a\tAny alphanumeric character (Optional) Not implemented yet\n// S\tAny letter\n// U\tAny letter (All lower case character will be mapped to uppercase)\n// L\tAny letter (All upper case character will be mapped to lowercase)\n// $\tEscape character, used to escape any of the special formatting characters.\n","import masker from './masker'\nimport tokens from './tokens'\n\n// https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events#The_old-fashioned_way\nfunction event (name) {\n  var evt = document.createEvent('Event')\n  evt.initEvent(name, true, true)\n  return evt\n}\n\nexport default function (el, binding) {\n  var config = binding.value\n  if (Array.isArray(config) || typeof config === 'string') {\n    config = {\n      mask: config,\n      tokens: tokens\n    }\n  }\n\n  if (el.tagName.toLocaleUpperCase() !== 'INPUT') {\n    var els = el.getElementsByTagName('input')\n    if (els.length !== 1) {\n      throw new Error(\"v-mask directive requires 1 input, found \" + els.length)\n    } else {\n      el = els[0]\n    }\n  }\n\n  el.oninput = function (evt) {\n    if (!evt.isTrusted) return // avoid infinite loop\n    /* other properties to try to diferentiate InputEvent of Event (custom)\n    InputEvent (native)\n      cancelable: false\n      isTrusted: true\n\n      composed: true\n      isComposing: false\n      which: 0\n\n    Event (custom)\n      cancelable: true\n      isTrusted: false\n    */\n    // by default, keep cursor at same position as before the mask\n    var position = el.selectionEnd\n    // save the character just inserted\n    var digit = el.value[position-1]\n    el.value = masker(el.value, config.mask, true, config.tokens)\n    // if the digit was changed, increment position until find the digit again\n    while (position < el.value.length && el.value.charAt(position-1) !== digit) {\n      position++\n    }\n    if (el === document.activeElement) {\n      el.setSelectionRange(position, position)\n      setTimeout(function () {\n        el.setSelectionRange(position, position)\n      }, 0)\n    }\n    el.dispatchEvent(event('input'))\n  }\n\n  var newDisplay = masker(el.value, config.mask, true, config.tokens)\n  if (newDisplay !== el.value) {\n    el.value = newDisplay\n    el.dispatchEvent(event('input'))\n  }\n}\n","<template>\n    <div class=\"c-textbox\">\n        <div class=\"c-textbox-wrapper tw-w-full\">\n            <component\n                    class=\"tw-form-input tw-block sm:tw-text-sm tw-rounded\"\n                    :is=\"computedComponent\"\n                    :autocapitalize=\"autocapitalize\"\n                    :autocomplete=\"autocomplete\"\n                    :autofocus=\"autofocus\"\n                    :class=\"{\n                        'tw-w-full': !size && type !== 'number',\n                        'tw-w-16': type === 'number',\n                        'is-invalid tw-border-danger': invalid,\n                        'tw-border-field-separator': !invalid && !disabled,\n                        'tw-text-red-600': max && max < this.value.length,\n                        'tw-bg-field-disabled-background border-field-disabled-separator': disabled,\n                        'tw-bg-field-background': !disabled\n                    }\"\n                    :cols=\"computedCols\"\n                    :disabled=\"disabled\"\n                    :id=\"id\"\n                    :mask=\"mask\"\n                    :max=\"max\"\n                    :min=\"min\"\n                    :name=\"name\"\n                    :pattern=\"pattern\"\n                    :placeholder=\"placeholder\"\n                    :readonly=\"readonly\"\n                    :rows=\"computedRows\"\n                    :size=\"size\"\n                    :spellcheck=\"spellcheck\"\n                    :step=\"step\"\n                    :type=\"computedType\"\n                    :value=\"value\"\n                    ref=\"input\"\n                    v-mask=\"mask\"\n                    @blur=\"$emit('blur', $event)\"\n                    @focus=\"$emit('focus', $event.target.value)\"\n                    @change=\"$emit('change', $event)\"\n                    @input=\"$emit('input', $event.target.value)\"\n                    @keydown=\"$emit('keydown', $event)\"\n                    @keypress=\"$emit('keypress', $event)\"\n                    @keyup=\"$emit('keyup', $event)\"\n            ><template v-if=\"type === 'textarea'\">{{value}}</template></component>\n\n            <p v-if=\"max\"\n               class=\"max\"\n               :class=\"{\n                    'tw-text-light-text': remainingChars >= 20,\n                    'tw-text-warning': remainingChars < 20 && remainingChars >= 0,\n                    'tw-text-danger': remainingChars < 0\n                }\"><small>{{ (max - remainingChars) }}/{{max}}</small></p>\n        </div>\n    </div>\n</template>\n\n<script>\n    import mask from 'vue-the-mask/src/directive'\n\n    export default {\n        directives: {\n            mask: {\n                bind(el, binding, vnode) {\n                    if (vnode.context.mask) {\n                        return mask(el, binding)\n                    }\n                }\n            }\n        },\n\n        props: {\n            autocapitalize: {\n                type: Boolean,\n                default: false\n            },\n            autocomplete: {\n                type: String,\n                default: 'on'\n            },\n            autofocus: {\n                type: Boolean,\n                default: false\n            },\n            cols: {\n                type: Number,\n                default: null,\n            },\n            disabled: {\n                type: Boolean,\n                default: false\n            },\n            invalid: {\n                type: Boolean,\n                default: false\n            },\n            id: {\n                type: String,\n                default: function () {\n                    return 'c-textbox-id-' + this._uid;\n                },\n            },\n            mask: {\n                type: String | Object,\n                default: ''\n            },\n            max: {\n                type: Number |Â String,\n                default: null\n            },\n            min: {\n                type: Number |Â String,\n                default: null\n            },\n            name: {\n                type: String,\n                default: null\n            },\n            pattern: {\n                type: String,\n                default: null\n            },\n            placeholder: {\n                type: String,\n                default: null\n            },\n            readonly: {\n                type: Boolean,\n                default: false\n            },\n            rows: {\n                type: Number |Â String,\n                default: null,\n            },\n            size: {\n                type: Number | String,\n                default: null\n            },\n            spellcheck: {\n                type: Boolean,\n                default: false\n            },\n            step: {\n                type: Number |Â String,\n                default: null\n            },\n            type: {\n                type: String,\n                default: 'text'\n            },\n            value: {\n                type: String | Number,\n                default: ''\n            },\n        },\n\n        computed: {\n            remainingChars() {\n                if (this.max) {\n                    return this.max - this.value.length\n                }\n            },\n\n            computedComponent() {\n                if (this.type === 'textarea') {\n                    return 'textarea'\n                }\n\n                return 'input'\n            },\n\n            computedType() {\n                if (this.type === 'textarea') {\n                    return null\n                }\n\n                return this.type\n            },\n\n            computedCols() {\n                if (this.type !== 'textarea') {\n                    return null\n                }\n\n                return this.cols\n            },\n\n            computedRows() {\n                if (this.type !== 'textarea') {\n                    return null\n                }\n\n                return this.rows ? this.rows : 4\n            }\n        },\n\n        created() {\n            this.$on('focus', function() {\n                this.$refs.input.focus()\n            })\n        },\n    }\n</script>\n\n","import Badge from './Badge.vue';\nimport Btn from './Btn.vue';\nimport Checkbox from './Checkbox.vue';\nimport Dropdown from './Dropdown.vue';\nimport Field from './Field.vue';\nimport Icon from './Icon.vue';\nimport Lightswitch from './Lightswitch.vue';\nimport Pane from './Pane.vue';\nimport Radio from './Radio.vue';\nimport Spinner from './Spinner.vue';\nimport Textbox from './Textbox.vue';\n\nconst CraftComponents = {\n    Badge,\n    Btn,\n    Checkbox,\n    Dropdown,\n    Field,\n    Icon,\n    Lightswitch,\n    Pane,\n    Radio,\n    Spinner,\n    Textbox,\n};\n\nexport default CraftComponents;\n\nexport {\n    Badge,\n    Btn,\n    Checkbox,\n    Dropdown,\n    Field,\n    Icon,\n    Lightswitch,\n    Pane,\n    Radio,\n    Spinner,\n    Textbox,\n}","import CraftIcons from './plugins/icons'\nimport CraftComponents from './components'\n\nexport default {\n    install(Vue) {\n        Vue.use(CraftIcons)\n\n        // Craft Components\n        Object.keys(CraftComponents).forEach(name => {\n            Vue.component(name, CraftComponents[name])\n        })\n    }\n}\n\nexport * from './components'"],"names":["install","document","iconsWrapper","createElement","style","display","innerHTML","body","insertBefore","firstChild","maskit","value","mask","masked","tokens","iMask","iValue","output","length","masker","cMask","cValue","escape","pattern","test","transform","restOutput","Array","isArray","masks","sort","a","b","i","currentMask","nextMask","dynamicMask","module","v","toLocaleUpperCase","toLocaleLowerCase","event","name","evt","createEvent","initEvent","el","binding","config","tagName","els","getElementsByTagName","Error","oninput","isTrusted","position","selectionEnd","digit","charAt","activeElement","setSelectionRange","setTimeout","dispatchEvent","newDisplay","CraftComponents","Badge","Btn","Checkbox","Dropdown","Field","Icon","Lightswitch","Pane","Radio","Spinner","Textbox","Vue","use","CraftIcons","Object","keys","forEach","component"],"mappings":"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"}